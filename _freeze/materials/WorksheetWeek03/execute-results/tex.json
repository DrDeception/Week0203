{
  "hash": "4ef1454b4a6f77aa9317501a996e3473",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Week 03 Worksheet - part 1\"\nsubtitle: \"A first gentle introduction\"\nauthor: \"INSERT YOUR NAME HERE\"\nformat: \n  pdf: default\n  html: default \neditor: visual\n---\n\n\n\n\n# Welcome to RStudio!\n\nThis worksheet will introduce you to the RStudio interface and the\nconcept of literate programming using R.\n\n## The RStudio Interface (Lab Tutor Tour)\n\nWhen you open RStudio, you'll see four main panes:\n\n1.  **Source Editor** (top-left): This is where you write and edit your\n    code and text.\n2.  **Console** (bottom-left): This is where R commands are executed and\n    where you see the output.\n3.  **Environment/History** (top-right): This shows the objects in your\n    workspace and your command history.\n4.  **Files/Plots/Packages/Help** (bottom-right): This multi-purpose\n    pane shows your files, plots, installed packages, and help\n    documentation.\n\n## This is a .qmd file\n\nIt is markdown - a text only language that can be edited anywhere, even\non your phone, because it uses commonly occurring symbols to do all the\nformatting. If you happen to know html, it's pretty similar. It's simple\n(once you get the idea), very small in terms of file-size, easily\naccessed, and versatile.\n\n## Understanding Literate Programming\n\nLiterate programming is a paradigm that combines explanatory text with\nexecutable code in a single document. This approach, pioneered by Donald\nKnuth in 1984, aims to make programming more accessible, understandable,\nand maintainable. When you learn about Open Science practices next week\nwith Stacey, she will probably talk about sharing of data, replicability\nand other big issues. One way in which we can make Science more\naccessible and open is by using techniques like this.\n\n### Key Concepts\n\n1.  **Integration of Code and Documentation**: In literate programming,\n    the code is interspersed with narrative text that explains the\n    purpose and functionality of the code.\n\n2.  **Human-Oriented**: The primary focus is on making the program\n    understandable to humans, rather than just computers.\n\n3.  **Executable Documents**: The resulting document can be both read as\n    a coherent explanation and executed as a functional program.\n\n### Benefits in Data Science and Research\n\nLiterate programming is particularly valuable in data science and\nresearch for several reasons:\n\n1.  **Reproducibility**: By combining code, results, and explanations,\n    others can easily reproduce and verify your work.\n\n2.  **Clear Communication**: It allows you to explain your thought\n    process, methodology, and interpretation of results alongside the\n    code that generates them.\n\n3.  **Error Checking**: The close proximity of code and explanation\n    makes it easier to spot inconsistencies or errors.\n\n4.  **version Control**: Changes in both code and narrative can be\n    tracked together, providing a comprehensive history of the project's\n    evolution.\n\n### Example in R\n\nHere's a simple example of literate programming in R using a Quarto\ndocument:\n\nIn this analysis, we'll explore the relationship between a car's\nhorsepower and its fuel efficiency using the `mtcars` dataset (this is a\ncommonly used dataset that comes installed in R).\n\n## \"The Results of My Amazing Experiment\"\n\nDear Reader, be amazed at my wonderfulness! Below, I am going to walk\nyou through the analysis. If you are reading this as a .qmd file, you\nwill see all the code. But after I render it to html or pdf, you'll only\nsee what I want you to see, such as just the pretty pictures, without\nthe code! Or I can fold up the code here too!\n\nAnother aspect of literate programming, other than narrating the larger\ndocument, you can also add comments in the code, to draw an interested\nreader to specialist aspects of what's happening there, or just to\nsignal what the code is doing. When you try to work with someone else's\ncode, comments like the ones below (but better) are really helpful!\n\nIf you are reading along in the .qmd file, press the green arrow to the\nright of the code cell to execute it. And bingo! R does it's work and\nperforms the calculations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the mtcars dataset\ndata(mtcars)\n\n# Create a scatter plot\nplot(mtcars$hp, mtcars$mpg, \n     main=\"Horsepower vs. Fuel Efficiency\", # Clearly these are the most important things!\n     xlab=\"Horsepower\", \n     ylab=\"Miles per Gallon\", # Can we change this to Kilometers per Litre for other countries? \n     pch=19, \n     col=\"darkblue\") # The best colour for car-based statistics\n```\n\n::: {.cell-output-display}\n![](WorksheetWeek03_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## The Visual Editor\n\nRStudio's visual editor provides a user-friendly interface for creating\nQuarto documents. It allows you to write text and code in a \"What You\nSee Is What You Get\" (WYSIWYG) environment.\n\nTo switch to the visual editor, click the \"Visual\" button at the\ntop-left of the Source Editor.\n\n## Writing Narrative Text\n\nIn the visual editor, you can simply type your text as you would in any\nword processor. You can use the formatting toolbar at the top to:\n\n-   Apply **bold** or *italic* formatting\n-   Create bullet or numbered lists\n-   Add headings\n-   Insert links or images\n\nTry writing a short paragraph about why you're studying Psychology\nbelow:\n\n\\[Your text here\\]\n\n## Adding Code Cells\n\nTo add a code cell:\n\n1.  Click the \"+C\" button in the toolbar or use the keyboard shortcut\n    Cmd+Option+I (Mac) or Ctrl+Alt+I (Windows/Linux)\n2.  You'll see a new code cell appear\n3.  Type your R code inside this cell\n\nLet's try a simple calculation. Add a code cell and type the following:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n## Running Code\n\nTo run the code in a cell:\n\nClick the \"Run\" button (green play icon) at the top-right of the cell,\nor Use the keyboard shortcut: Cmd+Enter (Mac) or Ctrl+Enter\n(Windows/Linux)\n\nThe output will appear directly below the code cell. Rendering Your\nDocument To create the final document:\n\nClick the \"Render\" button at the top of the editor Choose your desired\noutput format (HTML or PDF) RStudio will process your document and\ndisplay the result\n\n## Exercise\n\nLoad the data Gordon has been using today.\nIt is on the VLE here https://learn.gold.ac.uk/pluginfile.php/2430939/mod_resource/content/1/Y1W3_data.csv?forcedownload=1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Welcome to R! This is a comment. R doesn't run anything on a line after a '#'.\n\n# Before we can read our data, we need a special tool called 'readr'.\n# Think of this like getting a special pair of glasses to read a book.\n# We only need to do this once, just like you only need to buy glasses once.\ninstall.packages(\"readr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe following package(s) will be installed:\n- readr [2.1.5]\nThese packages will be installed into \"~/Week0203/renv/library/macos/R-4.4/x86_64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing readr ...                          OK [linked from cache]\nSuccessfully installed 1 package in 7.1 milliseconds.\n```\n\n\n:::\n\n```{.r .cell-code}\n# push the green play button\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now that we've got our special glasses (installed the package), we need to put them on to use them.\n# In R, we do this by 'loading' the library. We'll need to do this each time we start a new R session.\n# It's like putting on your glasses each time you want to read.\nlibrary(readr)  # This is like putting on the 'readr' glasses to use its features\n\n# push the green play button\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now let's read our uploaded data file. This is like opening a book that's right in front of you.\n# Make sure the CSV file is in your current working directory.\n# data <- \"Y1W3_data.csv\" # Please DELETE the # just before `data` at the beginning of this line\n\n# Look to see `data` pop up in the Environment panel\n# push the green play button\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's take a quick look at the first few rows of our data.\n# This is like reading the first page of the book.\n# print(head(data)) # Please DELETE the # at the beginning of this line\n\n# ouch. Lots of info about the data - don't stress it now.\n# push the green play button\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Now, let's get a summary of our data. \n# This is like reading the table of contents and index to get an overview.\n# print(summary(data)) # Please DELETE the # just before `data` at the beginning of this line\n\n# Some Summary Stats! Yay!\n# push the green play button\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can check how big our dataset is.\n# This is like counting the pages and chapters in our book.\n# cat(\"Our dataset has\", dim(data)[1], \"rows (like pages) and\", dim(data)[2], \"columns (like chapters)\\n\") # Please DELETE the # just before `data` at the beginning of this line\n\n# push the green play button\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Finally, let's see what information (columns) we have in our dataset.\n# This is like looking at the headings in our book.\n# cat(\"Our dataset contains information about:\\n\") # Please DELETE the # just before `data` at the beginning of this line\n# print(colnames(data)) # Please DELETE the # just before `data` at the beginning of this line too!\n\n# You did it!\n# Congratulations! You've just used R to read a data file and take a first look at it.\n# It's like you've opened a book, skimmed through its contents, and got an idea of what it's about!\n```\n:::\n\n\n\n\n## Normally... \n\nThat code chunk would only be like this:\n\n````\ninstall.packages(\"readr\")\nlibrary(readr)\ndata <- read_csv(\"Y1W3_data.csv\") # obviously this could be another file!\nsummary(data) # Even this isn't necessary if you know what the data includes already!\ndim(data) # or this\ncolnames(data) # or this.\n````\n\n## Data Viewer\n\nIf you look in the Environment panel to the right, you will see `data`\nand if you click on the little spreadsheet icon to the right, you can\nlook at it like a spreadsheet!\n\n### My First Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# COPY SOME CODE IN HERE from the slides from this morning - choose one of the early, simpler plots if possible\n```\n:::\n\n\n\n\nA super easy example is `plot(Y1W3_data$LoginCount)` which is just asking to plot the LoginCount column from the Y1W3_data dataset!\n\nTo be honest, that would be enough for this first visit! Well done.\n\n## Remember to Run the code cell\nBingo! \n\n## Now Press the Render Button at the top of the page and choose either html (for a website) or pdf (for a nice tidy document).\n\nRender your document to html (website) or pdf (document) and view the\nresults!\n\n## Conclusion\n\nYou've now learned the basics of:\n\n::: callout-note\n-   Navigating the RStudio interface Using the visual editor for Quarto\n    documents\n-   Writing narrative text and adding formatted elements\n-   Inserting and running code cells to do sums and create graphs\n-   Rendering your document\n:::\n\nKeep practicing these skills as you continue your journey with R and\ndata analysis!\n",
    "supporting": [
      "WorksheetWeek03_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}