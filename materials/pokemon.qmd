---
title: "GottaCatchEmAll"
format:
  html:
    code-fold: true
    code-copy: true
    toc: true
execute:
  echo: true
  warning: false
editor: visual
---

## Introduction

```{r}
library(tidyverse)
library(plotly)
library(knitr)

# Load and prepare the data
data <- read_csv("materials/data/Y1W3_data.csv", na = c("", "NA", "#N/A"))

student_data <- data %>%
  select(PokeNumber, PokeName, PokeImage, LoginCount, Q_Scale, CompTime, Image) %>%
  mutate(
    HasLoginCount = !is.na(LoginCount) & LoginCount != 0,
    SubmittedQuestions = !is.na(CompTime) & CompTime != "0" & CompTime != "",
    SubmittedImage = !is.na(Image) & Image != ""
  )

# Calculate engagement statistics
total_students <- nrow(student_data)
active_students <- sum(student_data$HasLoginCount)
questions_submitted <- sum(student_data$SubmittedQuestions)
image_submitted <- sum(student_data$SubmittedImage)

# Create a data frame for the engagement stages
engagement_data <- data.frame(
  Stage = c("Total Enrolled", "Active (Non-zero LoginCount)", "Submitted Questions", "Submitted Image"),
  Count = c(total_students, active_students, questions_submitted, image_submitted)
)

# Calculate percentages
engagement_data$Percentage <- engagement_data$Count / total_students * 100

# Reorder the stages to be in descending order
engagement_data <- engagement_data %>%
  arrange(desc(Count))

# Display the engagement data
kable(engagement_data, caption = "Student Engagement Summary", digits = 2)

# Create a visual representation of the engagement
p <- plot_ly(engagement_data, x = ~reorder(Stage, -Count), y = ~Count, type = 'bar', 
             text = ~paste(Count, " (", round(Percentage, 1), "%)"), 
             textposition = 'auto',
             marker = list(color = c('#1f77b4', '#2ca02c', '#d62728', '#9467bd'))) %>%
  layout(title = "Student Engagement Stages",
         xaxis = list(title = "Stage"),
         yaxis = list(title = "Number of Students"),
         showlegend = FALSE)

# Display the plot
p

```

## Visualisation of Student Data

This analysis covers levels of measurement, measures of central
tendency, variance, and various plot types using the student data
collected.

### 1. Levels of Measurement

1.  **Nominal**:
    -   MBTI (Myers-Briggs Type Indicator)
    -   Coin (Heads or Tails)
    -   DogCatBoth (Preference for pets)
    -   InsectApocalypse preference
2.  **Ordinal**:
    -   EyeContact (Likert or scale responses)
    -   Ten Item Personality Inventory scores (OCEAN)
3.  **Interval/Ratio**:
    -   Count of VLE Logins so far \[LoginCount\]
    -   Survey Completion Time \[CompTime - minutes\]

### 2. Central Tendency and Variance

Let's calculate these for LoginCount and the Extraversion (TIPI) score:

```{r central-tendency-variance}
numeric_data <- data %>%
  select(LoginCount, E_TIPI) %>%
  na.omit()

summary_stats <- numeric_data %>%
  summarise(across(everything(), list(
    Mean = ~mean(., na.rm = TRUE),
    Median = ~median(., na.rm = TRUE),
    SD = ~sd(., na.rm = TRUE),
    Variance = ~var(., na.rm = TRUE)
  )))

kable(t(summary_stats), digits = 2, caption = "Summary Statistics")
```

## Various Plot Types

### 1. Histogram: LoginCount

```{r histogram}
ggplot(data, aes(x = LoginCount)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Distribution of Login Counts",
       x = "Login Count",
       y = "Frequency") +
  theme_minimal()
```

### 2. Bar Chart: DogCatBoth Preferences

```{r bar-chart}
# Libraries
library(ggplot2)
library(dplyr)

# Assuming `data` is your dataset
ggplot(data %>% filter(!is.na(DogCatBoth)), aes(x = DogCatBoth)) +
  geom_bar(fill = "lightgreen") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +  # Adds count figures on top of bars
  labs(title = "Preference for Dogs, Cats, or Both",
       x = "Preference",
       y = "Count") +
  theme_minimal()


```

### 3a. Insect Apocalypse

```{r}
#| warning: false
  
library(tidyverse)
library(ggplot2)

data <- read_csv("materials/data/Y1W3_data.csv")

# Prepare the data
big_five_data <- data %>%
  select(InsectApocalypse, E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  pivot_longer(cols = c(E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI), 
               names_to = "Trait", 
               values_to = "Score") %>%
  mutate(Trait = factor(Trait, 
                        levels = c("E_TIPI", "A_TIPI", "C_TIPI", "ES_TIPI", "O_TIPI"),
                        labels = c("Extraversion", "Agreeableness", "Conscientiousness", 
                                   "Emotional Stability", "Openness"))) %>%
  group_by(InsectApocalypse, Trait) %>%
  summarise(Mean_Score = mean(Score, na.rm = TRUE), .groups = 'drop')

# Create the plot
ggplot(big_five_data, aes(x = Trait, y = Mean_Score, fill = InsectApocalypse)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Big Five Personality Traits Across InsectApocalypse Groups",
       x = NULL, 
       y = "Mean TIPI Score",
       fill = "Insect Preference") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom") +
  scale_fill_brewer(palette = "Set2")
```

### 3b. Insect Apocalypse

```{r}
#| warning: false
#| fig.width: 12
#| fig.height: 6

library(tidyverse)
library(ggplot2)

# Prepare the data
big_five_data <- data %>%
  select(InsectApocalypse, E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  pivot_longer(cols = c(E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI), 
               names_to = "Trait", 
               values_to = "Score") %>%
  mutate(Trait = factor(Trait, 
                        levels = c("E_TIPI", "A_TIPI", "C_TIPI", "ES_TIPI", "O_TIPI"),
                        labels = c("Extraversion", "Agreeableness", "Conscientiousness", 
                                   "Emotional Stability", "Openness"))) %>%
  group_by(InsectApocalypse, Trait) %>%
  summarise(
    Mean_Score = mean(Score, na.rm = TRUE),
    SE = sd(Score, na.rm = TRUE) / sqrt(n()),
    .groups = 'drop'
  )

# Create the plot
ggplot(big_five_data, aes(x = Trait, y = Mean_Score, fill = InsectApocalypse)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
  geom_errorbar(aes(ymin = Mean_Score - SE, ymax = Mean_Score + SE),
                position = position_dodge(width = 0.9),
                width = 0.25) +
  labs(title = "Big Five Personality Traits Across InsectApocalypse Groups",
       x = NULL, 
       y = "Mean TIPI Score",
       fill = "Insect Preference") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom") +
  scale_fill_brewer(palette = "Set2")
```

### 4a. Scatter Plot: EyeContact vs LoginCount

```{r scatter-plot}
ggplot(data, aes(x = LoginCount, y = EyeContact)) +
  geom_point(alpha = 0.7) +
  labs(title = "Eye Contact Score vs Login Count",
       x = "Login Count",
       y = "Eye Contact Score") +
  theme_minimal()
```

### 4b. Scatter Plot: EyeContact vs LoginCount

```{r}
# Libraries
library(ggplot2)

# Assuming `data` is your dataset
ggplot(data, aes(x = LoginCount, y = EyeContact)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Adds a trend line
  labs(title = "Eye Contact Score vs Login Count",
       x = "Login Count",
       y = "Eye Contact Score") +
  theme_minimal()

```

### 5a. Box Plot: CompTime by Conscientiousness Level

```{r boxplot}
# Create high/low conscientiousness groups
data$C_Group <- ifelse(data$C_TIPI > median(data$C_TIPI, na.rm = TRUE), "High", "Low")

# Ensure CompTime is numeric and remove NAs for plotting
ggplot(data %>% filter(!is.na(CompTime)), aes(x = C_Group, y = as.numeric(CompTime))) +
  geom_boxplot() +
  labs(title = "Completion Time by Conscientiousness Level",
       x = "Conscientiousness Level",
       y = "Completion Time (minutes)") +
  theme_minimal()

```

### 5b. Box Plot: CompTime by Conscientiousness Level

```{r}
# Create high/low conscientiousness groups
data$C_Group <- ifelse(data$C_TIPI > median(data$C_TIPI, na.rm = TRUE), "High", "Low")

# Filter data to include only responses with CompTime less than 2500 and remove NAs
ggplot(data %>% filter(!is.na(CompTime) & as.numeric(CompTime) < 2500), aes(x = C_Group, y = as.numeric(CompTime))) +
  geom_boxplot() +
  labs(title = "Completion Time by Conscientiousness Level (Restricted to < 2500 minutes)",
       x = "Conscientiousness Level",
       y = "Completion Time (minutes)") +
  theme_minimal()

```

### 6. MBTI Count Matrix

```{r mbti-matrix}
# Libraries
library(dplyr)
library(ggplot2)

# Exclude NAs and count occurrences of each MBTI type
mbti_counts <- data %>%
  filter(!is.na(MBTI)) %>%  # Exclude NAs
  group_by(MBTI) %>%
  summarize(Count = n()) %>%
  arrange(desc(Count))

# Display the counts
print(mbti_counts)

# Plot the counts using ggplot2
ggplot(mbti_counts, aes(x = reorder(MBTI, -Count), y = Count)) +
  geom_bar(stat = "identity", fill = "#69b3a2") +
  labs(title = "Counts of Each MBTI Type (Excluding NAs)",
       x = "MBTI Type",
       y = "Count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

### 7. TIPI Radar Charts by Pet Preference

```{r tipi-radar-charts, fig.width=15, fig.height=5}
# Libraries
library(dplyr)
library(fmsb)  # For radar charts

# Function to create radar chart with custom color
create_radar_chart <- function(data, title, color) {
  # Prepare radar data with max and min values for scaling
  radar_data <- rbind(
    c(5, 5, 5, 5, 5),  # Max values
    c(1, 1, 1, 1, 1),  # Min values
    data
  )
  colnames(radar_data) <- c("Extraversion", "Agreeableness", "Conscientiousness", "Emotional Stability", "Openness")
  
  # Create radar chart
  radarchart(radar_data, 
             pcol = color,                # Line color
             pfcol = adjustcolor(color, alpha.f = 0.5),  # Filled color
             plwd = 2,                    # Line width
             plty = 1,                    # Line type
             cglcol = "grey",             # Grid color
             cglty = 1,                   # Grid line type
             axislabcol = "grey",         # Axis label color
             caxislabels = seq(1, 5, 1),  # Axis label values
             cglwd = 0.8,                 # Grid line width
             vlcex = 0.8                  # Label size
  )
  title(title)  # Add chart title
}

# Prepare data for each group
dog_people <- data %>% 
  filter(DogCatBoth == "Dogs") %>%
  select(E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  summarise(across(everything(), mean, na.rm = TRUE))

cat_people <- data %>% 
  filter(DogCatBoth == "Cats") %>%
  select(E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  summarise(across(everything(), mean, na.rm = TRUE))

both_people <- data %>% 
  filter(DogCatBoth == "Both") %>%
  select(E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  summarise(across(everything(), mean, na.rm = TRUE))

# Set up plotting area to have 3 plots side by side
par(mfrow = c(1, 3))

# Create radar charts with different colors
create_radar_chart(dog_people, "Dog People", "blue")
create_radar_chart(cat_people, "Cat People", "red")
create_radar_chart(both_people, "Dog & Cat People", "green")


```

### 8. Heatmaps for Seating Preferences and TIPI Traits

```{r seating-heatmaps, fig.width=15, fig.height=15}
# Libraries
library(ggplot2)
library(gridExtra)
library(dplyr)

# Prepare seating data
seating_data <- data %>%
  select(Row, Column, E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  na.omit()

# Function to create heatmap with flipped x-axis and smooth coloring for each trait
create_heatmap <- function(data, trait, title, colors) {
  ggplot(data, aes(x = Column, y = Row, fill = .data[[trait]])) +
    geom_tile() +
    scale_x_reverse() +  # Flip the x-axis
    scale_fill_gradientn(colors = colors) +  # Use custom colors for smoother gradient
    labs(title = title, x = "Column", y = "Row") +
    theme_minimal() +
    theme(plot.title = element_text(hjust = 0.5))
}

# Color palettes for each trait
colors_extraversion <- c("white", "lightblue", "blue")
colors_agreeableness <- c("white", "lightgreen", "green")
colors_conscientiousness <- c("white", "yellow", "orange")
colors_emotional_stability <- c("white", "pink", "red")
colors_openness <- c("white", "purple", "purple4")

# Create heatmaps for each trait with different color scales
plots <- list(
  create_heatmap(seating_data, "E_TIPI", "Extraversion", colors_extraversion),
  create_heatmap(seating_data, "A_TIPI", "Agreeableness", colors_agreeableness),
  create_heatmap(seating_data, "C_TIPI", "Conscientiousness", colors_conscientiousness),
  create_heatmap(seating_data, "ES_TIPI", "Emotional Stability", colors_emotional_stability),
  create_heatmap(seating_data, "O_TIPI", "Openness", colors_openness)
)

# Arrange plots in a grid
grid.arrange(grobs = plots, ncol = 2)

# Scatter plot of seating distribution with flipped x-axis
ggplot(seating_data, aes(x = Column, y = Row)) +
  geom_point(alpha = 0.5) +
  scale_x_reverse() +  # Flip the x-axis
  labs(title = "Distribution of Seating Preferences", x = "Column", y = "Row") +
  theme_minimal()

```

### note: BoxPlot Basics

![](images/boxplot.png){fig-align="center"}

### 9. Compact Boxplots: TIPI Traits

```{r tipi-boxplots, fig.width=10, fig.height=6}
tipi_data <- data %>%
  select(E_TIPI, A_TIPI, C_TIPI, ES_TIPI, O_TIPI) %>%
  pivot_longer(cols = everything(), names_to = "Trait", values_to = "Score") %>%
  mutate(Trait = factor(Trait, levels = c("E_TIPI", "A_TIPI", "C_TIPI", "ES_TIPI", "O_TIPI"),
                        labels = c("Extraversion", "Agreeableness", "Conscientiousness", "Emotional Stability", "Openness")))

ggplot(tipi_data, aes(x = Trait, y = Score, fill = Trait)) +
  geom_boxplot() +
  labs(title = "Distribution of TIPI Traits", x = "", y = "Score") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "none")
```

### 10. Violin Plots: EyeContact and Psy4me by MBTI Dimension

```{r mbti-violin-plots, fig.width=12, fig.height=8}

library(ggExtra)
library(gridExtra)
library(ggplot2)  # Explicitly load ggplot2 for clarity

# Filter and mutate data without pipes
mbti_data <- subset(data, !is.na(MBTI))
mbti_data$IE <- substr(mbti_data$MBTI, 1, 1)
mbti_data$SN <- substr(mbti_data$MBTI, 2, 2)
mbti_data$TF <- substr(mbti_data$MBTI, 3, 3)
mbti_data$JP <- substr(mbti_data$MBTI, 4, 4)

# Create the first plot
p1 <- ggplot(mbti_data, aes(x = IE, y = EyeContact, fill = IE)) +
  geom_violin(trim = FALSE) +
  geom_boxplot(width = 0.1, fill = "white") +
  labs(title = "EyeContact by I/E Preference", x = "", y = "EyeContact Score") +
  theme_minimal()

# Create the second plot
p2 <- ggplot(mbti_data, aes(x = SN, y = Psy4me, fill = SN)) +
  geom_violin(trim = FALSE) +
  geom_boxplot(width = 0.1, fill = "white") +
  labs(title = "Psychology Interest by S/N Preference", x = "", y = "Psy4me Score") +
  theme_minimal()

# Arrange the plots side by side
grid.arrange(p1, p2, ncol = 2)
```

### 11. Scatterplots: Exploring Relationships

```{r scatterplots, fig.width=12, fig.height=8}
p3 <- ggplot(data, aes(x = E_TIPI, y = EyeContact, color = DogCatBoth)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Extraversion vs EyeContact", x = "Extraversion Score", y = "EyeContact Score") +
  theme_minimal()

p3
```
